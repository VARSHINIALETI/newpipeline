name: Build and Deploy WAR to Tomcat

on:
  workflow_dispatch:  # Manual trigger

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Build WAR
        run: mvn clean package -DskipTests

      - name: List target directory
        run: ls -la target/

      - name: Save WAR file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: springboot-app  # Name of the artifact
          path: target/*.war     # Path to the WAR file

      # Check if the WAR file is deployed or not
      - name: Check if WAR file is deployed
        id: check_deployment
        run: |
          if [ -f /opt/tomcat/webapps/demo-1.0.0.war ]; then
            echo "deployed=true" >> $GITHUB_ENV
          else
            echo "deployed=false" >> $GITHUB_ENV
          fi

      # If WAR file is deployed, run the full backup, stop, and redeploy process
      - name: Full Backup, Stop, and Redeploy if WAR is deployed
        if: env.deployed == 'true'
        run: |
          BACKUP_DIR="/home/varshini/war-backups"
          sudo mkdir -p $BACKUP_DIR
          
          # Remove previous backup if it exists
          sudo rm -f $BACKUP_DIR/demo-1.0.0-*.war
          
          # Define a timestamp for the new backup
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          # Backup the currently deployed WAR file
          sudo cp /opt/tomcat/webapps/demo-1.0.0.war $BACKUP_DIR/demo-1.0.0-$TIMESTAMP.war
          
          echo "Backup of running WAR file created at $BACKUP_DIR/demo-1.0.0-$TIMESTAMP.war"
          
          # Stop Tomcat server
          TOMCAT_PID=$(ps -ef | grep '[j]ava' | grep 'org.apache.catalina.startup.Bootstrap' | awk '{print $2}')
          if [ -z "$TOMCAT_PID" ]; then
            echo "Tomcat is not running."
          else
            sudo kill -9 $TOMCAT_PID
            echo "Tomcat server stopped. PID: $TOMCAT_PID"
          fi
          
          # Remove old WAR file
          sudo rm -f /opt/tomcat/webapps/demo-1.0.0.war
          echo "Old WAR file removed from Tomcat."

          # Deploy new WAR file
          sudo cp target/*.war /opt/tomcat/webapps/demo-1.0.0.war
          echo "New WAR file deployed to Tomcat."

          # Start Tomcat server
          sudo /opt/tomcat/bin/startup.sh
          echo "Tomcat server started."

      # If WAR file is not deployed, deploy the WAR file and start Tomcat
      - name: Direct deployment if WAR not deployed
        if: env.deployed == 'false'
        run: |
          # Deploy new WAR file directly
          sudo cp target/*.war /opt/tomcat/webapps/demo-1.0.0.war
          echo "New WAR file deployed to Tomcat."

          # Start Tomcat server
          sudo /opt/tomcat/bin/startup.sh
          echo "Tomcat server started."
